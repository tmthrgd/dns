//+build ignore

// msg_generate.go is meant to run with go generate. It will use
// go/{importer,types} to track down all the RR struct types. Then for each type
// it will generate pack/unpack methods based on the struct tags. The generated source is
// written to zmsg.go, and is meant to be checked into git.
package main

import (
	"bytes"
	"fmt"
	"go/format"
	"go/importer"
	"go/types"
	"io/ioutil"
	"log"
	"os"
	"strconv"
	"strings"
)

var packageHdr = `
// Code generated by "go run scan_generate.go"; DO NOT EDIT.

package dns

import (
	"encoding/base64"
	"net"
	"strconv"
	"strings"
)
`

// getTypeStruct will take a type and the package scope, and return the
// (innermost) struct if the type is considered a RR type (currently defined as
// those structs beginning with a RR_Header, could be redefined as implementing
// the RR interface). The bool return value indicates if embedded structs were
// resolved.
func getTypeStruct(t types.Type, scope *types.Scope) (*types.Struct, bool) {
	st, ok := t.Underlying().(*types.Struct)
	if !ok {
		return nil, false
	}
	if st.Field(0).Type() == scope.Lookup("RR_Header").Type() {
		return st, false
	}
	if st.Field(0).Anonymous() {
		st, _ := getTypeStruct(st.Field(0).Type(), scope)
		return st, true
	}
	return nil, false
}

func parseSizeField(tag string, st *types.Struct) (length, typ string) {
	len := strings.TrimPrefix(tag, `dns:"size-hex:`)
	len = strings.TrimPrefix(len, `dns:"size-base64:`)
	len = strings.TrimSuffix(len, `"`)

	for j := 1; j < st.NumFields(); j++ {
		if st.Field(j).Name() == len {
			typ = st.Field(j).Type().String()
			break
		}
	}

	if typ == "" {
		log.Fatalf("couldn't find length field for %q", tag)
	}

	return len, typ
}

func assignment(old bool) string {
	if old {
		return "="
	}

	return ":="
}

var notDynamic = map[string]bool{
	"AVC":        true,
	"DHCID":      true,
	"EID":        true,
	"HINFO":      true,
	"NINFO":      true,
	"OPENPGPKEY": true,
	"RFC3597":    true,
	"SPF":        true,
	"TKEY":       true,
	"TXT":        true,
	"UINFO":      true,
}

func main() {
	// Import and type-check the package
	pkg, err := importer.Default().Import("github.com/tmthrgd/dns")
	fatalIfErr(err)
	scope := pkg.Scope()

	// Collect actual types (*X)
	var namedTypes []string
	for _, name := range scope.Names() {
		o := scope.Lookup(name)
		if o == nil || !o.Exported() {
			continue
		}
		if st, _ := getTypeStruct(o.Type(), scope); st == nil {
			continue
		}
		if name == "PrivateRR" || name == "ANY" {
			continue
		}

		// Check if corresponding TypeX exists
		if scope.Lookup("Type"+o.Name()) == nil && o.Name() != "RFC3597" {
			log.Fatalf("Constant Type%s does not exist.", o.Name())
		}

		namedTypes = append(namedTypes, o.Name())
	}

	b := &bytes.Buffer{}
	b.WriteString(packageHdr)

	for _, name := range namedTypes {
		o := scope.Lookup(name)
		st, _ := getTypeStruct(o.Type(), scope)

		fmt.Fprintf(b, "func set%s(h RR_Header, c *zlexer, o, f string) (RR, *ParseError, string) {\n", name)

		switch name {
		case "CDNSKEY", "DNSKEY", "KEY",
			"CDS", "DS", "DLV",
			"LOC":
			fmt.Fprintln(b, "return nil, nil, \"\"\n}\n")
			continue
		}

		fmt.Fprintf(b, "rr := new(%s)\n", name)
		fmt.Fprint(b, "rr.Hdr = h\n")

		if name == "LOC" {
			fmt.Fprint(b, `
	// Non zero defaults for LOC record, see RFC 1876, Section 3.
	rr.HorizPre = 165 // 10000
	rr.VertPre = 162  // 10
	rr.Size = 18      // 1

`)
		}

		if !notDynamic[name] {
			fmt.Fprint(b, `
l, _ := c.Next()
if len(l.token) == 0 { // dynamic update rr.
	return rr, nil, ""
}

`)
		}

		var skipFields bool
		if name == "HINFO" {
			skipFields = true
			fmt.Fprintf(b, `
chunks, e, c1 := endingToTxtSlice(c, "bad %s Fields", f)
if e != nil {
	return nil, e, c1
}

if ln := len(chunks); ln == 0 {
	return rr, nil, ""
} else if ln == 1 {
	// Can we split it?
	if out := strings.Fields(chunks[0]); len(out) > 1 {
		chunks = out
	} else {
		chunks = append(chunks, "")
	}
}

rr.Cpu = chunks[0]
rr.Os = strings.Join(chunks[1:], " ")

`, name)
		}

		var (
			skipBlank       int
			comment         bool
			didStrconv      bool
			didAbsoluteName bool
		)
		for i := 1; i < st.NumFields() && !skipFields; i++ {
			f := st.Field(i)

			if name == "HIP" && strings.HasSuffix(f.Name(), "Length") {
				skipBlank = 1
				continue
			}

			if i > 1+skipBlank {
				fmt.Fprintln(b, "\nc.Next() // zBlank")

				var skipString bool
				switch st.Tag(i) {
				case `dns:"txt"`, `dns:"octet"`, `dns:"base64"`, `dns:"hex"`:
					skipString = true
				}

				if !skipString {
					fmt.Fprintln(b, "l, _ = c.Next() // zString")
				}
			} else if notDynamic[name] {
				fmt.Fprint(b, "\nl, _ = c.Next() // zString")
			}
			skipBlank = 0

			if _, ok := f.Type().(*types.Slice); ok {
				switch st.Tag(i) {
				case `dns:"-"`: // ignored
				case `dns:"txt"`:
					comment = true
					fmt.Fprintf(b, `
s, e, c1 := endingToTxtSlice(c, "bad %[2]s %[1]s", f)
if e != nil {
	return nil, e, ""
}
rr.%[1]s = s

`, f.Name(), name)
				case `dns:"nsec"`:
					fmt.Fprintf(b, `
rr.%[1]s = make([]uint16, 0)
for l.value != zNewline && l.value != zEOF {
	switch l.value {
	case zBlank:
		// Ok
	case zString:
		tokenUpper := strings.ToUpper(l.token)
		k, ok := StringToType[tokenUpper]
		if !ok {
			if k, ok = typeToInt(l.token); !ok {
				return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
			}
		}
		rr.%[1]s = append(rr.%[1]s, k)
	default:
		return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
	}
	l, _ = c.Next()
}

`, f.Name(), name)
				case `dns:"domain-name"`:
					fmt.Fprintf(b, `
// %[1]s (if any)
var xs []string
for l.value != zNewline && l.value != zEOF {
	switch l.value {
	case zString:
		name, nameOk := toAbsoluteName(l.token, o)
		if l.err || !nameOk {
			return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
		}

		xs = append(xs, name)
	case zBlank:
		// Ok
	default:
		return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
	}

	l, _ = c.Next()
}
rr.%[1]s = xs

`, f.Name(), name)
				default:
					//log.Fatalln(name, f.Name(), st.Tag(i))
					log.Println(name, f.Name(), st.Tag(i))
					fmt.Fprintf(b, "\n// TODO: %s %q\n", f.Name(), st.Tag(i))
				}

				continue
			}

			switch {
			case st.Tag(i) == `dns:"-"`: // ignored
			case strings.HasPrefix(name, "EUI") && f.Name() == "Address":
				len, err := strconv.Atoi(strings.TrimPrefix(name, "EUI"))
				fatalIfErr(err)

				addrLen := len * 2 / 8

				fmt.Fprintf(b, `
if len(l.token) != 17 || l.err {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}

addr := make([]byte, %[4]d)
dash := 0
for i := 0; i < len(addr); i += 2 {
	addr[i] = l.token[i+dash]
	addr[i+1] = l.token[i+1+dash]
	dash++
	if i+1+dash < len(addr) && l.token[i+1+dash] != '-' {
		return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
	}
}

i, e := strconv.ParseUint(string(addr), 16, %[3]d)
if e != nil {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}
rr.%[1]s = i

`, f.Name(), name, len, addrLen)
			case st.Tag(i) == `dns:"cdomain-name"` || st.Tag(i) == `dns:"domain-name"`:
				fmt.Fprintf(b, `
name, nameOk %[3]s toAbsoluteName(l.token, o)
if l.err || !nameOk {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}
rr.%[1]s = name

`, f.Name(), name, assignment(didAbsoluteName))
				didAbsoluteName = true
			case st.Tag(i) == `dns:"a"` || st.Tag(i) == `dns:"aaaa"`:
				fmt.Fprintf(b, `
rr.%[1]s = net.ParseIP(l.token)
if rr.%[1]s == nil || l.err {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}

`, f.Name(), name)
			case st.Tag(i) == `dns:"octet"`:
				comment = true
				fmt.Fprintf(b, `
s, e, c1 := endingToTxtSlice(c, "bad %[2]s %[1]s", f)
if e != nil {
	return nil, e, ""
}
if len(s) != 1 {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}
rr.%[1]s = s[0]

`, f.Name(), name)
			case st.Tag(i) == `dns:"base64"` || st.Tag(i) == `dns:"hex"`:
				comment = true
				fmt.Fprintf(b, `
s, e, c1 := endingToString(c, "bad %[2]s %[1]s", f)
if e != nil {
	return nil, e, ""
}
rr.%[1]s = s

`, f.Name(), name)
			case strings.HasPrefix(st.Tag(i), `dns:"size-hex:`):
				lengthField, typ := parseSizeField(st.Tag(i), st)
				fmt.Fprintf(b, `
if len(l.token) == 0 || l.err {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}
rr.%[1]s = l.token // This cannot contain spaces.
rr.%[3]s = %[4]s(len(rr.%[1]s) / 2)

`, f.Name(), name, lengthField, typ)
			case strings.HasPrefix(st.Tag(i), `dns:"size-base64:`):
				lengthField, typ := parseSizeField(st.Tag(i), st)
				fmt.Fprintf(b, `
if len(l.token) == 0 || l.err {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}
rr.%[1]s = l.token // This cannot contain spaces.
rr.%[3]s = %[4]s(base64.StdEncoding.DecodedLen(len(rr.%[1]s)))

`, f.Name(), name, lengthField, typ)
			case name == "L64" && f.Name() == "Locator64":
				fmt.Fprintf(b, `
u, ok := stringToNodeID(l)
if !ok || l.err {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}
rr.Locator64 = u

`, f.Name(), name)
			case st.Tag(i) == "" && name == "CERT" && f.Name() == "Type":
				fmt.Fprint(b, `
if v, ok := StringToCertType[l.token]; ok {
	rr.Type = v
} else if i, err := strconv.ParseUint(l.token, 10, 16); err != nil {
	return nil, &ParseError{f, "bad CERT Type", l}, ""
} else {
	rr.Type = uint16(i)
}

`)
			case st.Tag(i) == "" && name == "CERT" && f.Name() == "Algorithm":
				fmt.Fprint(b, `
if v, ok := StringToAlgorithm[l.token]; ok {
	rr.Algorithm = v
} else if i, err := strconv.ParseUint(l.token, 10, 8); err != nil {
	return nil, &ParseError{f, "bad CERT Algorithm", l}, ""
} else {
	rr.Algorithm = uint8(i)
}

`)
			case st.Tag(i) == "":
				switch f.Type().(*types.Basic).Kind() {
				case types.Uint8:
					fmt.Fprintf(b, `
i, err %[3]s strconv.ParseUint(l.token, 10, 8)
if err != nil || l.err {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}
rr.%[1]s = uint8(i)

`, f.Name(), name, assignment(didStrconv))
					didStrconv = true
				case types.Uint16:
					fmt.Fprintf(b, `
i, err %[3]s strconv.ParseUint(l.token, 10, 16)
if err != nil || l.err {
return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}
rr.%[1]s = uint16(i)

`, f.Name(), name, assignment(didStrconv))
					didStrconv = true
				case types.Uint32:
					fmt.Fprintf(b, `
i, err %[3]s strconv.ParseUint(l.token, 10, 32)
if err != nil || l.err {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}
rr.%[1]s = uint32(i)

`, f.Name(), name, assignment(didStrconv))
					didStrconv = true
				case types.String:
					if name == "GPOS" {
						fmt.Fprintf(b, `
_, err %[3]s strconv.ParseFloat(l.token, 64)
if err != nil || l.err {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}
rr.%[1]s = l.token

`, f.Name(), name, assignment(i > 1))
						continue
					}

					fmt.Fprintf(b, `
if l.value != zString {
	return nil, &ParseError{f, "bad %[2]s %[1]s", l}, ""
}
rr.%[1]s = l.token

`, f.Name(), name)
				default:
					//log.Fatalln(name, f.Name())
					log.Println(name, f.Name())
					fmt.Fprintf(b, "\n// TODO: %s\n", f.Name())
				}
			default:
				//log.Fatalln(name, f.Name(), st.Tag(i))
				log.Println(name, f.Name(), st.Tag(i))
				fmt.Fprintf(b, "\n// TODO: %s %q\n", f.Name(), st.Tag(i))
			}
		}

		for i := 1; false && i < st.NumFields(); i++ {
			o := func(s string) {
				fmt.Fprintf(b, s, st.Field(i).Name())
				fmt.Fprint(b, `if err != nil {
return off, err
}
`)
			}

			if _, ok := st.Field(i).Type().(*types.Slice); ok {
				switch st.Tag(i) {
				case `dns:"-"`: // ignored
				case `dns:"txt"`:
					o("off, err = packStringTxt(rr.%s, msg, off)\n")
				case `dns:"opt"`:
					o("off, err = packDataOpt(rr.%s, msg, off)\n")
				case `dns:"nsec"`:
					o("off, err = packDataNsec(rr.%s, msg, off)\n")
				case `dns:"domain-name"`:
					o("off, err = packDataDomainNames(rr.%s, msg, off, compression, compress)\n")
				default:
					log.Fatalln(name, st.Field(i).Name(), st.Tag(i))
				}
				continue
			}

			switch {
			case st.Tag(i) == `dns:"-"`: // ignored
			case st.Tag(i) == `dns:"cdomain-name"`:
				o("off, err = PackDomainName(rr.%s, msg, off, compression, compress)\n")
			case st.Tag(i) == `dns:"domain-name"`:
				o("off, err = PackDomainName(rr.%s, msg, off, compression, false)\n")
			case st.Tag(i) == `dns:"a"`:
				o("off, err = packDataA(rr.%s, msg, off)\n")
			case st.Tag(i) == `dns:"aaaa"`:
				o("off, err = packDataAAAA(rr.%s, msg, off)\n")
			case st.Tag(i) == `dns:"uint48"`:
				o("off, err = packUint48(rr.%s, msg, off)\n")
			case st.Tag(i) == `dns:"txt"`:
				o("off, err = packString(rr.%s, msg, off)\n")

			case strings.HasPrefix(st.Tag(i), `dns:"size-base32`): // size-base32 can be packed just like base32
				fallthrough
			case st.Tag(i) == `dns:"base32"`:
				o("off, err = packStringBase32(rr.%s, msg, off)\n")

			case strings.HasPrefix(st.Tag(i), `dns:"size-base64`): // size-base64 can be packed just like base64
				fallthrough
			case st.Tag(i) == `dns:"base64"`:
				o("off, err = packStringBase64(rr.%s, msg, off)\n")

			case strings.HasPrefix(st.Tag(i), `dns:"size-hex:SaltLength`):
				// directly write instead of using o() so we get the error check in the correct place
				field := st.Field(i).Name()
				fmt.Fprintf(b, `// Only pack salt if value is not "-", i.e. empty
if rr.%s != "-" {
  off, err = packStringHex(rr.%s, msg, off)
  if err != nil {
    return off, err
  }
}
`, field, field)
				continue
			case strings.HasPrefix(st.Tag(i), `dns:"size-hex`): // size-hex can be packed just like hex
				fallthrough
			case st.Tag(i) == `dns:"hex"`:
				o("off, err = packStringHex(rr.%s, msg, off)\n")

			case st.Tag(i) == `dns:"octet"`:
				o("off, err = packStringOctet(rr.%s, msg, off)\n")
			case st.Tag(i) == "":
				switch st.Field(i).Type().(*types.Basic).Kind() {
				case types.Uint8:
					o("off, err = packUint8(rr.%s, msg, off)\n")
				case types.Uint16:
					o("off, err = packUint16(rr.%s, msg, off)\n")
				case types.Uint32:
					o("off, err = packUint32(rr.%s, msg, off)\n")
				case types.Uint64:
					o("off, err = packUint64(rr.%s, msg, off)\n")
				case types.String:
					o("off, err = packString(rr.%s, msg, off)\n")
				default:
					log.Fatalln(name, st.Field(i).Name())
				}
			default:
				log.Fatalln(name, st.Field(i).Name(), st.Tag(i))
			}
		}

		if comment {
			fmt.Fprintln(b, "return rr, nil, c1\n}\n")
		} else {
			fmt.Fprintln(b, "return rr, nil, \"\"\n}\n")
		}
	}

	// Generate typeToUnpack map
	fmt.Fprintln(b, "var typeToparserFunc = map[uint16]parserFunc{")
	for _, name := range namedTypes {
		if name == "RFC3597" {
			continue
		}

		fmt.Fprintf(b, "Type%s: {set%s, %t},\n", name, name, notDynamic[name])
	}
	fmt.Fprintln(b, "}\n")

	// gofmt
	res, err := format.Source(b.Bytes())
	if err != nil {
		b.WriteTo(os.Stderr)
		log.Fatal(err)
	}

	// write result
	err = ioutil.WriteFile("zscan_rr.go", res, 0666)
	fatalIfErr(err)
}

// structMember will take a tag like dns:"size-base32:SaltLength" and return the last part of this string.
func structMember(s string) string {
	fields := strings.Split(s, ":")
	if len(fields) == 0 {
		return ""
	}
	f := fields[len(fields)-1]
	// f should have a closing "
	if len(f) > 1 {
		return f[:len(f)-1]
	}
	return f
}

// structTag will take a tag like dns:"size-base32:SaltLength" and return base32.
func structTag(s string) string {
	fields := strings.Split(s, ":")
	if len(fields) < 2 {
		return ""
	}
	return fields[1][len("\"size-"):]
}

func fatalIfErr(err error) {
	if err != nil {
		log.Fatal(err)
	}
}
